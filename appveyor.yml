#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 2.4.{build}.0
configuration:
    - CORE
    - WMF
image: Visual Studio 2015
install:
    - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    - git clone https://github.com/johlju/DscResource.Tests
    - ps: Push-Location
    - ps: cd "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests"
    - git checkout fix-pscore
    - ps: Pop-Location
    - ps: |
        # Download and install latest PowerShell Core version.
        $msiPath = "$env:TEMP\PowerShellCore.msi"
        (New-Object Net.WebClient).DownloadFile('https://github.com/PowerShell/PowerShell/releases/download/v6.0.2/PowerShell-6.0.2-win-x64.msi', $msiPath)
        Write-Verbose 'Installing PowerShell Core' -Verbose
        Start-Process 'msiexec.exe' -Wait -ArgumentList "/i $msiPath /quiet"
        Remove-Item $msiPath
        $env:Path = "$env:ProgramFiles\PowerShell\6.0.2;$env:Path"
    - pwsh: |
        Write-Verbose -Message "PowerShell Core v$($PSVersionTable.PSVersion)" -Verbose
        if ($PSVersionTable.PSVersion -lt [Version] '6.0.2')
        {
            throw 'Wrong PowerShell Core version installed.'
        }
    - ps: |
        # Download and install latest Windows PowerShell version.
        Import-Module -Name .\Tests\TestHelpers\WMF5Dot1Installation.psm1 -Force
        Install-Wmf5Dot1
    - ps: Start-Sleep 5
    - ps: Restart-Computer -Force
    - ps: Start-Sleep 5
    - ps: |
        Write-Verbose -Message "Returned after restart with Windows PowerShell v$($PSVersionTable.PSVersion)" -Verbose
        if ($PSVersionTable.PSVersion -lt [Version] '5.1')
        {
            throw 'WMF 5.1 install failed'
        }
    - ps: |
        # Must add this path $env:Path so that 'pwsh:' finds 'pwsh'.
        $env:Path = "$env:ProgramFiles\PowerShell\6.0.2;$env:Path"
        Import-Module "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests\AppVeyor.psm1"
        # Must run this on Windows PowerShell to install Package Provider and Pester.
        Invoke-AppveyorInstallTask
    - pwsh: |
        Import-Module "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests\AppVeyor.psm1"
        # Installs Pester, but this will ignore installing Package Provider when edition is CORE.
        Invoke-AppveyorInstallTask

on_finish:
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

for:
-
  matrix:
    only:
      - configuration: CORE

  test_script:
    - pwsh: |
        $appVeyorAddTest = @{
            Framework = NUnit
            Filename = pwsh.exe
            Outcome = Passed
            Duration = 1000
        }
        & appveyor AddTest "PowerShell Core 1" @appVeyorAddTest
        & appveyor AddTest "PowerShell Core 2" -Framework NUnit -Filename pwsh.exe -Outcome Passed -Duration 1000
        # Must load the module here again, because each pwsh started has it's own session.
        Import-Module "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests\AppVeyor.psm1"
        Invoke-AppveyorTestScriptTask -CodeCoverage -CodeCovIo -ExcludeTag @()


-
  matrix:
    only:
      - configuration: WMF

  test_script:
    - ps: Invoke-AppveyorTestScriptTask -CodeCoverage -CodeCovIo -ExcludeTag @()


#- ps: Add-AppveyorTest -Name "Windows PowerShell" -Framework NUnit -Filename pwsh.exe -Outcome Passed -Duration 1000
#- pwsh: |
#    Add-AppveyorTest -Name "PowerShell Core" -Framework NUnit -Filename pwsh.exe -Outcome Passed -Duration 1000

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

# scripts to run before deployment
deploy_script:
    - ps: |
        Invoke-AppveyorAfterTestTask
